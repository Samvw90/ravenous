{"version":3,"sources":["components/SearchBar/SearchBar.js","components/business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","sortByOption","this","setState","event","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","key","className","getSortByClass","onClick","renderSortByOptions","placeholder","onChange","React","Component","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","reviview_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3daf4271.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n        this.sortByOptions = {\r\n            'Best Match':'best_match',\r\n            'Highest rated':'rating',\r\n            'Most Reviewed':'review_count'\r\n        };\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleSortByChange = this.handleSortByChange.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if(this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            const sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                    {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\r\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map((business)=> {\r\n                        return <Business business={business} key={business.id} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default BusinessList;\r\n\r\n","const apiKey = 'YRcjxrdKa1DUi_kSlcPbB8R4HXsoZCqqgyF1qDuQ-La9ulGJuLKJPh1ZdlpgVPBfC71ggRgr3y-34s26KGyyl6ANzhSiOp_E27skbsBTSYGUEnL6tef8qAF15e4yX3Yx';\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if(jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business => {\r\n                return {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.reviview_count\r\n                    }\r\n                }\r\n                );\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Yelp;","import React from 'react';\r\nimport './App.css';\r\n// import '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport Yelp from '../../util/Yelp';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { businesses: []};\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then(businesses => {\r\n      this.setState({ businesses: businesses});\r\n    });\r\n\r\n    // console.log(`You are searching for ${term} in ${location} area, sorted by ${sortBy}.`);\r\n  }\r\n\r\n  render() {\r\n  return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}